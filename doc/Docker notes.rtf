{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\froman\fcharset0 Times-Roman;\f2\fnil\fcharset0 HelveticaNeue;
\f3\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue233;\red25\green28\blue31;\red255\green255\blue255;
\red223\green33\blue121;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c93333;\cssrgb\c12941\c14510\c16078;\cssrgb\c100000\c100000\c100000;
\cssrgb\c90980\c24314\c54902;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Docker tutorial from {\field{\*\fldinst{HYPERLINK "https://takacsmark.com/dockerfile-tutorial-by-example-dockerfile-best-practices-2018/"}}{\fldrslt 
\f1 \cf2 \expnd0\expndtw0\kerning0
\ul \ulc2 \outl0\strokewidth0 \strokec2 https://takacsmark.com/dockerfile-tutorial-by-example-dockerfile-best-practices-2018/}}
\f1 \cf2 \expnd0\expndtw0\kerning0
\ul \ulc2 \outl0\strokewidth0 \strokec2 \
\
\pard\pardeftab720\sl360\partightenfactor0

\f2\fs32 \cf3 \cb4 \ulnone \strokec3 Every Dockerfile must start with the\'a0
\f3\fs28 \cf5 \strokec5 FROM
\f2\fs32 \cf3 \strokec3 \'a0instruction.\'a0 (base)\
\
Run (not in the dockerfile): \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl320\partightenfactor0
\ls1\ilvl0
\f3\fs28 \cf5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 docker build
\f2\fs32 \cf3 \strokec3 \'a0is the command to build a Docker image from a Dockerfile\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl360\partightenfactor0
\ls1\ilvl0\cf3 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 -t takacsmark/alpine-smarter:1.0 defines the tag (hence -t) of the image, which will be basically the name of the image. As the first part I put my own name\'a0
\f3\fs28 \cf5 \strokec5 takacsmark
\f2\fs32 \cf3 \strokec3 , because I\'92m the maintainer of the image, then I gave it a human readable name\'a0
\f3\fs28 \cf5 \strokec5 alpine-smarter
\f2\fs32 \cf3 \strokec3 \'a0and provided a version number\'a0
\f3\fs28 \cf5 \strokec5 1.0
\f2\fs32 \cf3 \strokec3 .\cb1 \
\ls1\ilvl0\cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 please note the\'a0
\f3\fs28 \cf5 \strokec5 .
\f2\fs32 \cf3 \strokec3 \'a0(dot) at the end of the line. You need to specify the directory where\'a0
\f3\fs28 \cf5 \strokec5 docker build
\f2\fs32 \cf3 \strokec3 \'a0should be looking for a Dockerfile. Therefore\'a0
\f3\fs28 \cf5 \strokec5 .
\f2\fs32 \cf3 \strokec3 \'a0tells\'a0
\f3\fs28 \cf5 \strokec5 docker build
\f2\fs32 \cf3 \strokec3 \'a0to look for the file in the current directory.\cb1 \
\pard\tx720\pardeftab720\sl360\partightenfactor0
\cf3 \
docker run <options> <command>\
    run a program in the docker environment, connected to terminal\
\
docker build runs the Dockerfile.  Each RUN, COPY, and ADD step creates an intermediate image.  These can be reused in another docker build (they are cached). \
\
docker images -a  \
    list all images, including intermediate results \
\
docker images \'97filter \'93dangling=true\'94\
    List images that don\'92t have names \
\
docker rmi <image names>\
docker rmi $(docker images -q \'97filter \'93dangling=true\'94)\
\
Combining build steps: \
\
FROM <base-image>\
RUN <step> && \\\
         <step> && \\\
         etc\
\
\
Including project sources: \
\
\pard\pardeftab720\sl360\partightenfactor0
\cf3 \cb4 The directory where you issue the\'a0
\f3\fs28 \cf5 \strokec5 docker build
\f2\fs32 \cf3 \strokec3 \'a0command is called the build context. Docker will send all of the files and directories in your build directory to the Docker daemon as part of the build context.\cb1 \
\pard\tx720\pardeftab720\sl360\partightenfactor0
\cf3 \
\
The Dockerfile basic instructions: \
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl320\partightenfactor0
\ls2\ilvl0
\f3\fs28 \cf5 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 FROM
\f2\fs32 \cf3 \strokec3 \'a0- every Dockerfile starts with\'a0
\f3\fs28 \cf5 \strokec5 FROM
\f2\fs32 \cf3 \strokec3 , with the introduction of multi-stage builds as of version 17.05, you can have more than one\'a0
\f3\fs28 \cf5 \strokec5 FROM
\f2\fs32 \cf3 \strokec3 \'a0instruction in one Dockerfile.\cb1 \
\ls2\ilvl0
\f3\fs28 \cf5 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 COPY - simplified version of ADD\
\ls2\ilvl0
\f2\fs32 \cf3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 \'a0
\f3\fs28 \cf5 \strokec5 ADD
\f2\fs32 \cf3 \strokec3 \'a0(or COPY) - copy a directory into the image (e.g., we would use this to bring in SRPC or ADTS)\cb1 \
\ls2\ilvl0
\f3\fs28 \cf5 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 ENV
\f2\fs32 \cf3 \strokec3 \'a0- set environment variables, both in the image and in the Dockerfile context\cb1 \
\ls2\ilvl0
\f3\fs28 \cf5 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 RUN <command>
\f2\fs32 \cf3 \strokec3 \'a0(called shell form) and\'a0
\f3\fs28 \cf5 \strokec5 RUN ["executable", "param1", "param2"]
\f2\fs32 \cf3 \strokec3 \'a0called exec form.  
\f3\fs28 \cf5 \strokec5 RUN <command>
\f2\fs32 \cf3 \strokec3 \'a0will invoke a shell automatically (
\f3\fs28 \cf5 \strokec5 /bin/sh -c
\f2\fs32 \cf3 \strokec3 \'a0by default), while the exec form will not invoke a command shell.\cb1 \
\ls2\ilvl0
\f3\fs28 \cf5 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 VOLUME
\f2\fs32 \cf3 \strokec3 \'a0- mounting a host volume, to keep state outside of the Docker image\cb1 \
\ls2\ilvl0
\f3\fs28 \cf5 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 USER
\f2\fs32 \cf3 \strokec3 \'a0- when root is too mainstream.\cb1 \
\ls2\ilvl0
\f3\fs28 \cf5 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 WORKDIR
\f2\fs32 \cf3 \strokec3 \'a0- set the working directory.\cb1 \
\ls2\ilvl0
\f3\fs28 \cf5 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 EXPOSE
\f2\fs32 \cf3 \strokec3 \'a0- get your ports right.\cb1 \
\ls2\ilvl0
\f3\fs28 \cf5 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 ONBUILD
\f2\fs32 \cf3 \strokec3 \'a0- give more flexibility to your team and clients.\cb1 \
\pard\tx720\pardeftab720\sl360\partightenfactor0
\cf3 \
\
\
\
}